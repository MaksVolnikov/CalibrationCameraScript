#–ü—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –º–æ–¥—É–ª—å –Ω–∞ Python, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ä–∞–∑–º–µ—â–µ–Ω–Ω–æ–≥–æ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–æ–≥–ª–∞—Å–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –¥–ª–∏–Ω—ã, —à–∏—Ä–∏–Ω—ã –∏ –ø–ª–æ—â–∞–¥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 
import numpy as np
from skimage import io
from matplotlib import pyplot as plt

def show_images(in_img_list, in_img_path_list):
    f, ax = plt.subplots(1, len(in_img_list), figsize=(13, 5), squeeze=True)    
    for index, img_zip in enumerate(zip(in_img_list, in_img_path_list)):
        img = img_zip[0]
        img_name = img_zip[1]
        ax[index].axis("off")
        ax[index].imshow(img, cmap='gray')
        ax[index].set_title(f"{index} ({img_name})")
    plt.show()

print("–ò—Å—Ö–æ–¥–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –≤–∏–¥ —Å–±–æ–∫—É")
img_path_list = ["_images/_CalibratePic.jpg", "_images/_TestPic.jpg", "_images/_ProfilePic.jpg"]
img_list = [io.imread(img_path) for img_path in img_path_list]
show_images(img_list, img_path_list)

## –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ –∫–∞–º–µ—Ä—ã
# –ò–∑–º–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ (ùëëùëã –∏ ùëëùëå)
REAL_CALIBRATION_WIDTH = 7.5   # —Å–º
REAL_CALIBRATION_HEIGHT = 11.2 # —Å–º

# –ò–∑–º–µ—Ä–µ–Ω–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (–≤—ã—Å–æ—Ç–∞ –∏ —à–∏—Ä–∏–Ω–∞) –≤ –ø–∏–∫—Å–µ–ª—è—Ö (ùëëùë• –∏ ùëëùë¶)
IMG_CALIBRATION_WIDTH = 192    # px
IMG_CALIBRATION_HEIGHT = 284   # px

# –ò–∑–º–µ—Ä–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã –¥–æ –æ–±—ä–µ–∫—Ç–∞ (ùëëùëç)
CAM_CALIBRATION_DISTANCE = 40  # —Å–º

# _1_ –û–ø–∏—Å–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–∞–º–µ—Ä—ã c –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º–∏ (ùêæ) –∏ –≤–Ω–µ—à–Ω–∏–º–∏ ([ùëÖ|ùë°]) –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–º–µ—Ä—ã.
class Camera:
    def __init__(self):
        self.cx = 0                             # –û–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ y
        self.cy = 0                             # –û–ø—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –ø–æ x
        self.fx = 0                             # –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ùëì –ø–æ x ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–µ–Ω—Ç—Ä–æ–º –∫–∞–º–µ—Ä—ã.
        self.fy = 0                             # –§–æ–∫—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ ùëì –ø–æ y ‚Äî —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –ø–ª–æ—Å–∫–æ—Å—Ç—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ü–µ–Ω—Ç—Ä–æ–º –∫–∞–º–µ—Ä—ã.
        self.K = np.array(0)                    # –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        
    def calibrate(self, w_px, h_px, w_sm, h_sm, dist_sm):
        self.fx = (w_px * dist_sm) / w_sm       # fx = (dx/dX)*dZ 
        self.fy = (h_px * dist_sm) / h_sm       # fy = (dy/dY)*dZ
        # –ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        self.K = np.array([[self.fx, 0,       self.cx], 
                           [0,       self.fy, self.cy], 
                           [0,       0,       1]])
        
    # _2_ –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–µ—Ü–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã—Ö —Ç–æ—á–µ–∫ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    def get_roi(self, img, x, y, w, h):
        Yc, Xc, _ = img.shape
        return [x - Xc / 2, y - Yc / 2, w, h]
    
    # _3_ –ú–µ—Ç–æ–¥, —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—é—â–∏–π —Ç—Ä–µ—Ö–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–∞–º–µ—Ä—ã, —É—á–∏—Ç—ã–≤–∞—è –µ–µ –¥–≤—É—Ö–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    def get_coordinates(self, rect):
        # np.matmul - –ú–∞—Ç—Ä–∏—á–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö –º–∞—Å—Å–∏–≤–æ–≤; np.linalg.inv - –í—ã—á–∏—Å–ª–µ–Ω–∏–µ (–º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–∏–≤–Ω–æ–π) –æ–±—Ä–∞—Ç–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω—ã –º–∞—Ç—Ä–∏—Ü—ã;
        p0 = np.matmul(np.linalg.inv(self.K), np.array([[rect[0]],           [rect[1]],           [1]]))
        p1 = np.matmul(np.linalg.inv(self.K), np.array([[rect[0] + rect[2]], [rect[1]],           [1]]))
        p2 = np.matmul(np.linalg.inv(self.K), np.array([[rect[0]],           [rect[1] + rect[3]], [1]]))
        p3 = np.matmul(np.linalg.inv(self.K), np.array([[rect[0] + rect[2]], [rect[1] + rect[3]], [1]]))
        return [p0, p1, p2, p3]
    
    def get_real_size(self, coordinates, in_scale):
        calc_w = (coordinates[3][0] - coordinates[0][0]) * in_scale
        calc_h = (coordinates[3][1] - coordinates[0][1]) * in_scale
        return calc_w, calc_h

    def print_stats(self, in_calc_w, in_calc_h, in_real_w, in_real_h):
        print(f'–ü–æ–ª—É—á–µ–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞: {np.round(in_calc_w, 5)} —Å–º, —Ä–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞: {np.round(in_real_w, 5)} —Å–º, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {np.round(in_real_w - in_calc_w, 5)}')
        print(f'–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞: {np.round(in_calc_h, 5)} —Å–º, —Ä–µ–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: {np.round(in_real_h, 5)} —Å–º, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {np.round(in_real_h - in_calc_h, 5)}')
        print(f'–ü–æ–ª—É—á–µ–Ω–Ω–∞—è –ø–ª–æ—â–∞–¥—å: {np.round(in_calc_w * in_calc_h, 5)} –º¬≤, —Ä–µ–∞–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥—å {np.round((in_real_w * in_real_h), 5)} –º¬≤, –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å: {np.round((in_real_w * in_real_h) - (in_calc_w * in_calc_h), 5)}–º¬≤')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –∫–∞–º–µ—Ä—ã –∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã
camera = Camera()
camera.calibrate(w_px=IMG_CALIBRATION_WIDTH, h_px=IMG_CALIBRATION_HEIGHT, w_sm=REAL_CALIBRATION_WIDTH, h_sm=REAL_CALIBRATION_HEIGHT, dist_sm=CAM_CALIBRATION_DISTANCE)

# _4_ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–ª–æ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç-–æ–±—ä–µ–∫—Ç–∞ –∏ –∏–∑–º–µ—Ä–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
CALIBRATION_IMG_START_X = 332 # px
CALIBRATION_IMG_START_Y = 544 # px
calibration_img = img_list[0]
coordinates = camera.get_coordinates(camera.get_roi(calibration_img, CALIBRATION_IMG_START_X, CALIBRATION_IMG_START_Y, IMG_CALIBRATION_WIDTH, IMG_CALIBRATION_HEIGHT))

w, h = camera.get_real_size(coordinates, CAM_CALIBRATION_DISTANCE)
print(f'\n**–ö–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**')
camera.print_stats(w, h, REAL_CALIBRATION_WIDTH, REAL_CALIBRATION_HEIGHT)

# _5_ –°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–∞—Ç—Ä–∏—Ü, –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç–∏.
IMG_TEST_WIDTH = 172   # px
IMG_TEST_HEIGHT = 280  # px
IMG_TEST_START_X = 323 # px
IMG_TEST_START_Y = 539 # px
CAM_TEST_DISTANCE = 37 # —Å–º
test_img = img_list[1]
coordinates = camera.get_coordinates(camera.get_roi(test_img, IMG_TEST_START_X, IMG_TEST_START_Y, IMG_TEST_WIDTH, IMG_TEST_HEIGHT))
w, h = camera.get_real_size(coordinates, CAM_TEST_DISTANCE)
print(f'\n**–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ**')
camera.print_stats(w, h, 6, 10.8)